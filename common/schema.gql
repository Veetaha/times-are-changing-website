# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AdminUpdateUserInput {
  """New user name."""
  name: String

  """New user avatar id. This is currently an uploadcare image uiud."""
  avatarImgId: String

  """Defines the login of the user to update"""
  login: String!
  role: UserRole
}

"""Filter input parameters for `Boolean` type."""
input BooleanFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` logical expression."""
  eq: Boolean

  """Defines `target != param` logical expression."""
  neq: Boolean
}

input CreateNewsCommentInput {
  """Id of the news to add a comment to."""
  newsId: Int!

  """Comment markdown body text."""
  body: String!
}

input CreateNewsInput {
  title: String!
  body: String!
  promoImgId: String
}

"""Filter input parameters for `Date` type."""
input DateFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` logical expression."""
  eq: DateTime

  """Defines `target != param` logical expression."""
  neq: DateTime

  """Defines `target <= param` logical expression."""
  geq: DateTime

  """Defines `target <= param` logical expression."""
  leq: DateTime

  """Defines `target > param` logical expression."""
  gt: DateTime

  """Defines `target < param` logical expression."""
  lt: DateTime

  """Defines `target IN param` logical expression."""
  in: [DateTime!]

  """Defines `target NOT IN param` logical expression."""
  nin: [DateTime!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
Defines a mode to unite all filter conditions for fields or inside one field.
"""
enum FilterUnion {
  And
  Or
  Nand
  Nor
}

"""Filter input parameters for `Int` type."""
input IntFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` logical expression."""
  eq: Int

  """Defines `target != param` logical expression."""
  neq: Int

  """Defines `target <= param` logical expression."""
  geq: Int

  """Defines `target <= param` logical expression."""
  leq: Int

  """Defines `target > param` logical expression."""
  gt: Int

  """Defines `target < param` logical expression."""
  lt: Int

  """Defines `target IN param` logical expression."""
  in: [Int!]

  """Defines `target NOT IN param` logical expression."""
  nin: [Int!]
}

type Mutation {
  """
  Returns `UserAndToken` for the client according to the given `credentials`.
  """
  signIn(params: SignInInput!): UserAndToken

  """
  Registers the client in the database and returns its `UserAndToken`. Throws if failed to register new client.
  """
  signUp(params: SignUpInput!): UserAndToken!

  """Requires auth. Updates current client data and returns it."""
  updateMe(params: UpdateUserInput!): User!

  """
  Requires 'Admin' rights. Updates user by the given login and returns it, but
  retuns `null` if there nothing was found for the given login.
  """
  updateUser(params: AdminUpdateUserInput!): User

  """
  Requires auth. Creates or updates existing rating the client gave to the news.
  """
  rateNews(
    """Id of the news to rate."""
    newsId: Int!

    """`true` if user has liked the news, `false` means a dislike."""
    hasLiked: Boolean!
  ): NewsRating!

  """
  Requires auth. Deletes rating instance on behalf of the client. Returns `true` if deletion was successful.
  """
  deleteNewsRating(newsId: Float!): Boolean!

  """Requires auth. Creates news on behalf of the client and returns it."""
  createNews(params: CreateNewsInput!): News!

  """
  Requires auth. Updates news and returns it, but throws if news doesn't exist or client has no rights to mutate the news.
  """
  updateNews(params: UpdateNewsInput!): News!

  """
  Requires auth. Deletes the news by id and returns `true`, but throws if news
  doesn't exist or client has no rights to mutate the news.
  """
  deleteNewsById(id: Int!): Boolean!

  """Requires auth. Creates comment on news from behalf of the client."""
  createNewsComment(params: CreateNewsCommentInput!): NewsComment!

  """
  Requires auth. Updates news comment and returns it, but throws if comment
  doesn't exist or client has no rights to mutate the comment.
  """
  updateNewsComment(params: UpdateNewsCommentInput!): NewsComment!

  """
  Requires auth. Deletes news comment with the given `id`. Returns `true` if
  deletion was successful. Throws if client has no rights to delete the target news comment.
  """
  deleteNewsCommentById(id: Int!): Boolean!
}

type News {
  """`News` unique identifier."""
  id: Int!

  """Date when this news was created."""
  creationDate: DateTime!

  """Date when this news was updated last time."""
  lastUpdateDate: DateTime!

  """Login of the user that created this news."""
  creatorLogin: String!

  """Human-readable sentence that laconically describes this news."""
  title: String!

  """
  News main body markdown text, it may be vulnerable XSS attacks, be sure to
  sanitize it on the client side after having converted it to HTML.
  """
  body: String!

  """
  Id (from `UploadCare` file-hosting service) of the image to display as the introduction to the news.
  """
  promoImgId: String

  """Total amoutn of likes for this news."""
  likesAmount: Int!

  """Total amount of dislikes for this news."""
  dislikesAmount: Int!

  """Total amount of comments for this news."""
  commentsAmount: Int!

  """
  Returns the rating that the client has set to this news or `null` if client is
  not authenticated or he hasn't set any rating to the target news yet.
  """
  myRating: NewsRating

  """
  Returns existing news `promoImgId` or default one if former was not set.
  """
  promoImgIdOrDefault: String!

  """Returns the user that created this news."""
  creator: User!
}

"""
Represents users' thoughts about particular news that they express in text.
"""
type NewsComment {
  """`NewsComment` unique identifier."""
  id: Int!

  """Date when this comment was created."""
  creationDate: DateTime!

  """Date when this comment was updated last time."""
  lastUpdateDate: DateTime!

  """Login of the user that created this comment."""
  commentatorLogin: String!

  """Id of the news that the user commented on."""
  newsId: Int!

  """
  Comment body markdown text, it may be vulnerable XSS attacks, be sure to
  sanitize it on the client side after having converted it to HTML.
  """
  body: String!

  """Returns the user that commented on the given `news`."""
  commentator: User!

  """Returns the news that was commented by the `commentator`."""
  news: News!
}

input NewsCommentFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Per-property filters."""
  props: NewsCommentPropsFilterInput!
}

type NewsCommentPage {
  """Contains an array of items payload for this page."""
  data: [NewsComment!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input NewsCommentPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines limitations for the items of the returned page."""
  filter: NewsCommentFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: NewsCommentSortInput
}

input NewsCommentPropsFilterInput {
  id: IntFilterInput
  newsId: IntFilterInput
  commentatorLogin: StringFilterInput
  body: StringFilterInput
  creationDate: DateFilterInput
  lastUpdateDate: DateFilterInput
}

input NewsCommentSortInput {
  newsId: SortInput
  commentatorLogin: SortInput
  creationDate: SortInput
  lastUpdateDate: SortInput
}

input NewsFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Per-property filters."""
  props: NewsPropsFilterInput!
}

type NewsPage {
  """Contains an array of items payload for this page."""
  data: [News!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input NewsPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines limitations for the items of the returned page."""
  filter: NewsFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: NewsSortInput
}

input NewsPropsFilterInput {
  id: IntFilterInput
  title: StringFilterInput
  promoImgId: StringFilterInput
  creatorLogin: StringFilterInput
  creationDate: DateFilterInput
  lastUpdateDate: DateFilterInput
}

"""Represents a [dis]like instance that the users set to news."""
type NewsRating {
  """Login of the user that rated the news."""
  raterLogin: String!

  """Id of the news that the user rated."""
  newsId: Int!

  """Defines whether the user liked the news or not."""
  hasLiked: Boolean!

  """Returns the user that rated the given `news`."""
  rater: User!

  """Returns the news that was rated by the `rater`."""
  news: News!
}

input NewsRatingFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Per-property filters."""
  props: NewsRatingPropsFilterInput!
}

type NewsRatingPage {
  """Contains an array of items payload for this page."""
  data: [NewsRating!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input NewsRatingPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines limitations for the items of the returned page."""
  filter: NewsRatingFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: NewsRatingSortInput
}

input NewsRatingPropsFilterInput {
  newsId: IntFilterInput
  raterLogin: StringFilterInput
  hasLiked: BooleanFilterInput
}

input NewsRatingSortInput {
  newsId: SortInput
  raterLogin: SortInput
  hasLiked: SortInput
}

input NewsSortInput {
  id: SortInput
  title: SortInput
  creatorLogin: SortInput
  creationDate: SortInput
  lastUpdateDate: SortInput
}

type Query {
  """Returns user by login, or `null` if nothing was found."""
  getUserByLogin(login: String!): User

  """Paginates all users."""
  getUsersPage(params: UserPaginationInput!): UserPage!

  """Requires auth. Returns `User` that represents the current client."""
  getMe: User!

  """Paginates all news ratings."""
  getNewsRatingsPage(params: NewsRatingPaginationInput!): NewsRatingPage!

  """Paginates all news."""
  getNewsPage(params: NewsPaginationInput!): NewsPage!

  """
  Returns a single news instance by `id`, or `null` if nothing was found.
  """
  getNewsById(id: Int!): News

  """Paginates all news comments."""
  getNewsCommentsPage(params: NewsCommentPaginationInput!): NewsCommentPage!
}

input SignInInput {
  login: String!
  password: String!
}

input SignUpInput {
  credentials: SignInInput!
  name: String!
}

"""Defines ascending or descending order for sorting items."""
enum SortingOrder {
  Asc
  Desc
}

"""Defines sorting order for the given field."""
input SortInput {
  """
  Defines whether to return `null` values first or not (`false` by default)
  """
  nullsFirst: Boolean

  """Defines the order for the given field to be sorted with."""
  ordering: SortingOrder!
}

"""Filter input parameters for `String` type"""
input StringFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` logical expression."""
  eq: String

  """Defines `target != param` logical expression."""
  neq: String

  """
  Matches `target` that contains `param` substring in case-insensitive way.
  """
  ilike: String

  """
  Matches `target` that doesnt't contain `param` substring in case-insensitive way.
  """
  nilike: String

  """
  Matches `target` that contains `param` substring in case-sensitive way.
  """
  like: String

  """
  Matches `target` that doesn't contain `param` substring in case-sensitive way.
  """
  nlike: String

  """Defines `target IN param` logical expression."""
  in: [String!]

  """Defines `target NOT IN param` logical expression."""
  nin: [String!]
}

input UpdateNewsCommentInput {
  id: Int!
  body: String!
}

input UpdateNewsInput {
  id: Int!
  title: String
  body: String
  promoImgId: String
}

input UpdateUserInput {
  """New user name."""
  name: String

  """New user avatar id. This is currently an uploadcare image uiud."""
  avatarImgId: String
}

type User {
  """Unique user identifier."""
  login: String!

  """Date when this account was created."""
  creationDate: DateTime!

  """Date when this account was updated last time."""
  lastUpdateDate: DateTime!

  """Defines user access level role."""
  role: UserRole!

  """User name to refer to him/her."""
  name: String!

  """
  User avatar picture url, or null of was not set. This is currently an `uploadcare` image uuid.
  """
  avatarImgId: String

  """
  Returns existing user `avatarImgId` or default one if former was not set.
  """
  avatarImgIdOrDefault: String!
}

type UserAndToken {
  """User instance that represents the client data."""
  user: User!

  """
  Bearer auth token that the client has to pass in "Authorization" header
  """
  token: String!
}

input UserFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Per-property filters."""
  props: UserPropsFilterInput!
}

type UserPage {
  """Contains an array of items payload for this page."""
  data: [User!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input UserPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines limitations for the items of the returned page."""
  filter: UserFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: UserSortInput
}

input UserPropsFilterInput {
  avatarImgId: StringFilterInput
  creationDate: DateFilterInput
  lastUpdateDate: DateFilterInput
  login: StringFilterInput
  name: StringFilterInput
  role: UserRoleFilterInput
}

"""Enumeration that defines users' access level"""
enum UserRole {
  Guest
  Regular
  Admin
}

input UserRoleFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` logical expression."""
  eq: UserRole

  """Defines `target != param` logical expression."""
  neq: UserRole

  """Defines `target IN param` logical expression."""
  in: [UserRole!]

  """Defines `target NOT IN param` logical expression."""
  nin: [UserRole!]
}

input UserSortInput {
  login: SortInput
  name: SortInput
  creationDate: SortInput
  lastUpdateDate: SortInput
  role: SortInput
}
