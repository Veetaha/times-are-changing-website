# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AdminUserUpdateInput {
  """New user name."""
  name: String

  """New user avatar id. This is currently an uploadcare image uiud."""
  avatarId: String

  """Defines the login of the user to update"""
  login: String!
  role: UserRole
}

"""Filter input parameters for `Date` type."""
input DateFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` SQL logical expression."""
  eq: DateTime

  """Defines `target <> param` SQL logical expression."""
  neq: DateTime

  """Defines `target <= param` SQL logical expression."""
  geq: DateTime

  """Defines `target <= param` SQL logical expression."""
  leq: DateTime

  """Defines `target > param` SQL logical expression."""
  gt: DateTime

  """Defines `target < param` SQL logical expression."""
  lt: DateTime

  """Defines `target IN param` SQL logical expression."""
  in: [DateTime!]

  """Defines `target NOT IN param` SQL logical expression."""
  nin: [DateTime!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
Defines a mode to unite all filter conditions for fields or inside one field.
"""
enum FilterUnion {
  And
  Or
  Nand
  Nor
}

type Mutation {
  """
  Returns `UserAndToken` for the client according to the given `credentials`.
  """
  signIn(params: SignInInput!): UserAndToken

  """
  Registers the client in the database and returns its `UserAndToken`. Throws if failed to register new client.
  """
  signUp(params: SignUpInput!): UserAndToken!

  """Requires auth. Updates current client data and returns it."""
  updateMe(params: UserUpdateInput!): User!

  """
  Requires 'Admin' rights. Updates user by the given login and returns it, but
  retuns `null` if there nothing was found for the given login.
  """
  updateUser(params: AdminUserUpdateInput!): User
}

type Query {
  """Returns global default user `avatarId`."""
  getDefaultUserAvatarId: String!

  """Returns user by login, or `null` if nothing was found."""
  getUserByLogin(login: String!): User

  """Paginates all users."""
  getUsersPage(params: UserPaginationInput!): UserPage!

  """Requires auth. Returns `User` that represents the current client."""
  getMe: User!
}

input SignInInput {
  login: String!
  password: String!
}

input SignUpInput {
  credentials: SignInInput!
  name: String!
}

"""Defines ascending or descending order for sorting items."""
enum SortingOrder {
  Asc
  Desc
}

"""Defines sorting order for the given field."""
input SortInput {
  """
  Defines whether to return `null` values first or not (`false` by default)
  """
  nullsFirst: Boolean

  """Defines the order for the given field to be sorted with."""
  ordering: SortingOrder!
}

"""Filter input parameters for `String` type"""
input StringFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` SQL logical expression."""
  eq: String

  """Defines `target <> param` SQL logical expression."""
  neq: String

  """Applies `param` POSIX case-insensitive regular expression to `target`."""
  iregexp: String

  """
  Applies `param` POSIX case-insensitive regular expression to `target` and negates the result.
  """
  niregexp: String

  """Applies `param` POSIX case-sensitive regular expression to `target`."""
  regexp: String

  """
  Applies `param` POSIX case-sensitive regular expression to `target` and negates the result.
  """
  nregexp: String

  """Defines `target IN param` SQL logical expression."""
  in: [String!]

  """Defines `target NOT IN param` SQL logical expression."""
  nin: [String!]
}

type User {
  """Date when this account was created."""
  creationDate: DateTime!

  """Date when this account was updated last time."""
  lastUpdateDate: DateTime!

  """Defines user access level role."""
  role: UserRole!

  """User name to refer to him/her."""
  name: String!

  """Unique user identifier."""
  login: String!

  """
  User avatar picture url, or null of was not set. This is currently an `uploadcare` image uuid.
  """
  avatarId: String

  """Returns existing `avatarid` or default one if former was not set."""
  avatarIdOrDefault: String!
}

type UserAndToken {
  """User instance that represents the client data."""
  user: User!

  """
  Bearer auth token that the client has to pass in "Authorization" header
  """
  token: String!
}

input UserFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Per-property filters."""
  props: UserPropsFilterInput!
}

type UserPage {
  """Contains an array of items payload for this page."""
  data: [User!]!

  """
  Total number of items a client can query with this request. It must me an integer that is >= 0.
  """
  total: Int!
}

input UserPaginationInput {
  """
  Maximum amount of items to return for page. It must be an integer within the range [0, 500]
  """
  limit: Int!

  """
  Offset that defines an index of the beginning of the page of items. It must be an integer that is >= 0.
  """
  offset: Int!

  """Defines limitations for the items of the returned page."""
  filter: UserFilterInput

  """
  Defines sorting order for the items according to their property values.
  """
  sort: UserSortInput
}

input UserPropsFilterInput {
  avatarId: StringFilterInput
  creationDate: DateFilterInput
  lastUpdateDate: DateFilterInput
  login: StringFilterInput
  name: StringFilterInput
  role: UserRoleFilterInput
}

"""Enumeration that defines users' access level"""
enum UserRole {
  Guest
  Regular
  Admin
}

input UserRoleFilterInput {
  """
  Defines the mode (logical operator) to unite all filter conditions (`And` by default).
  """
  unionMode: FilterUnion

  """Defines `target == param` SQL logical expression."""
  eq: UserRole

  """Defines `target <> param` SQL logical expression."""
  neq: UserRole

  """Defines `target IN param` SQL logical expression."""
  in: [UserRole!]

  """Defines `target NOT IN param` SQL logical expression."""
  nin: [UserRole!]
}

input UserSortInput {
  avatarUrl: SortInput
  login: SortInput
  name: SortInput
  creationDate: SortInput
  lastUpdateDate: SortInput
  role: SortInput
}

input UserUpdateInput {
  """New user name."""
  name: String

  """New user avatar id. This is currently an uploadcare image uiud."""
  avatarId: String
}
